<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
    <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
    <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
    <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
    <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
    <script src = "/public/js/asyncRequest.js" type = "text/javascript"></script>
    <script src = "/public/js/teacherKeyDisplay.js" type = "text/javascript"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
    <style>
        * {
            font-family: "Roboto", sans-serif;
            box-sizing: border-box;
        }
        body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }
        .background {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            vertical-align: text-bottom;
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
        }
        .popupHolder {
            width: 50%;
            box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
            position: fixed;
            top: 50%;
            left: calc(50% + 125px);
            transform: translate(-50%, -50%);
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            overflow-x: auto;
            max-width: 0px;
        }
        .popupTextarea {
            width: 100%;
            height: 100%;
            padding: 15px;
            font-size: 18px;
            border: 0;
            border-radius: 0;
            appearance: none;
            -webkit-appearance: none;
            outline: none;

        }
        .popupHolderOpen {
            max-width: 50% !important;
            min-width: 400px;
        }
        .popupTitle {
            width: 100%;
            border-bottom: 1px solid #ddd;
            font-size: 30px;
            font-weight: 600;
            text-align: center;
            padding: 10px 0px;
        }
        .popupBody {
            width: 100%;
            height: 400px;
            overflow-y: auto;
            position: relative;
        }
        .popupBottom {
            width: 100%;
            height: 70px;
            border-top: 1px solid #ddd;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: flex-end;
        }
        .popupEnter {
            background-color: rgb(3,155,229);
            padding: 13px 20px;
            color: white;
            margin: 0px 20px;
            cursor: pointer;
        }
        .popupCancel {
            padding: 13px 20px;
            cursor: pointer;
        }
        .popupCancel:hover {
            background-color: #ddd;
        }
        .barLeft {
            width: 250px;
            height: 100%;
            background-color: #262f3d;
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;
            overflow-y: auto;
        }
        .bodyRight {
            width: calc(100% - 250px);
            position: relative;
            height: 100%;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .bodyUpperSection {
            width: 100%;
            /* height: 150px; */
            background-color: #039be5;
            margin: 0;
            padding: 0;
        }
        .bodyLowerSection {
            margin: 0;
            width: 100%;
            flex-grow: 1;
            background-color: #f5f7f9;
            overflow-x: auto;
            overflow-y: visible;
        }
        .barTitle {
            font-size: 27px;
            letter-spacing: 2px;
        }
        .sideBarTitle {
            width: 100%;
            height: 140px;
            padding-top: 20px;
            padding-bottom: 20px;
        }
        .headerLogo {
            width: 100%;
        }
        .sideBarTopic {
            width: 100%;
            padding: 20px;
            border-bottom: 1px solid rgb(56, 70, 90);
            cursor: pointer;
        }
        .sideBarTopic:hover {
            background-color: rgb(56, 70, 90);
        }
        .sideBarMain {
            font-size: 18px;
            color: white;
            margin-bottom: 5px;
            letter-spacing: 0.5px;
        }
        .sideBarSecondary {
            font-size: 13px;
            color: #aaa;
        }
        .sideBarOverview {
            color: white;
            padding: 20px;
            border-top: 1px solid rgb(56, 70, 90);
            border-bottom: 1px solid rgb(56, 70, 90);
        }
        .sideBarOverview:hover {
            background-color: rgb(56, 70, 90);
            cursor: pointer;
        }
        .topBar {
            width: 100%;
            height: 50px;
            /* background-color: red; */
            color: rgba(255,255,255,0.6);
            padding: 10px 20px;
        }
        .secondaryBar {
            width: 100%;
            padding: 10px 20px;
            margin-left: auto;
            margin-right: auto;
            margin-bottom: 10px;
            color: white;
        }
        .tabsBar {
            width: 100%;
            padding: 10px 10px 0px 10px;
            display: flex;
            flex-direction: row;
            position: relative;
            overflow-x: auto;
        }
        .tabsBarSelect {
            width: 100%;
            height: 5px;
            background-color: white;
            position: absolute;
            bottom: 0px;
            left: 0px;
            border-radius: 10px 10px 0px 0px;
        }
        .tabsBarTab {
            color: #eee;
            margin: 0px 40px;
            padding-bottom: 10px;
            cursor: pointer;
            position: relative;
        }


        .mainBody {
            width: 60%;
            height: 400px;
            background-color: white;
            margin: auto;
            border-radius: 10px;
            -webkit-box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
            -moz-box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
            box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
        }
        .notAllowed {
            background-color:  #ddd !important;
            color: #aaa !important;
            cursor: not-allowed !important;
        }
        #errorPopDown {
            padding: 20px;
            background-color: rgb(241,80,79);
            font-size: 18px;
            color: white;
            border-radius: 10px;
            position: fixed;
            left: 50%;
            transform: translateX(-50%);
            top: -100px;
            -webkit-box-shadow: -9px 10px 36px 0px rgba(0,0,0,0.75);
            -moz-box-shadow: -9px 10px 36px 0px rgba(0,0,0,0.75);
            box-shadow: -9px 10px 36px 0px rgba(0,0,0,0.75);
            transition: top 0.2s ease-out
        }
        .errorDown {
            top: 100px !important;
            cursor: pointer;
        }
        .expandingBlock {
            max-height: 0px;
            overflow: hidden;
            transition: max-height 0.2s linear;
        }
        .expandedLink {
            padding-top: 10px;
            padding-bottom: 10px;
            padding-left: 10px;
            color: #aaa;
            font-size: 13px;
        }
        .expandedLink:hover {
            background-color: rgb(56, 70, 90);
        }
        .expandedTopic {
            width: 100%;
            padding: 20px;
            border-bottom: 1px solid rgb(56, 70, 90);
            cursor: pointer;
        }
        .openSideBar {
            position: fixed;
            top: 10px;
            left: 10px;
            color: white;
            width: 50px;
            height: 50px;
            font-size: 22px;
            opacity: 0.5;
            display: none;
            z-index: 100;
            cursor: pointer;
        }  
        .extendedBar {
            left: 0px !important;
        }    
        .bodyModal {
            width: 100%;
            height: 0;
            overflow: auto;
            position: fixed;
            top: 0;
            left: 0;
            background-color: rgba(0,0,0,0.4);
            opacity: 0;
            transition: opacity .3s ease-out;
        }
        .openModal {
            height: 100%;
            opacity: 1;
            display: block;
            z-index: 9;
        }
        @media screen and (max-width: 1000px) {
            .barLeft {
                /* display: none; */
                transition: left 0.45s cubic-bezier(0.0,0.0,0.2,1);
                position: absolute;
                top: 0px;
                left: -250px;
                z-index: 10;
            }
            .openSideBar {
                display: block;
            }
            .topBar {
                visibility: hidden;
            }
            .bodyRight {
                width: 100%;
            }
            .popupHolder {
                width: 75%;
                left: 50%;
            }
        }
        .tableHolderMain {
            width: 95%;
            min-width: 500px;
            background-color: #f5f5f5;
            -webkit-box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
            -moz-box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
            box-shadow: -5px 4px 17px 2px rgba(0,0,0,0.25);
            border-radius: 3px;
            margin: auto;
            margin-top: 20px;
            margin-bottom: 80px;
        }
        #rowDisplay {
            height: 400px;
            overflow-y: auto;
        }
        .lastProperty {
            position: relative;
        }
        .rowsHeader {
            border-bottom: 1px solid #ddd;
            position: relative;
            background-color: #f5f5f5;
            cursor: pointer;
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none; /* Safari */
            -khtml-user-select: none; /* Konqueror HTML */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; 
        }
        .selectedArrow {
            color: black;
        }
        .unselectedArrow {
            color: #ddd;
        }
        .rowsHeader td {
            text-align: left;
            font-weight: 500;
            font-size: 13px;
            color: #666;
            padding: 15px 5px;
        }
        .container {
            width: 100%; 
            max-height: 0px;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            background-color: #f5f5f5;
        }
        .openContainer {
            max-height: 400px !important;
            border-bottom: 1px solid #ddd !important;
        }
        .container-top table {
            width: 100%;
            table-layout: fixed;
            border-collapse: collapse;
        }
        .createRowCategory {
            padding: 30px 3px;
        }
        .textInput {
            width: 90%;
            height: 40px;
            font-size: 16px;
            outline: none;
            appearance: none;
            -webkit-appearance: none;
            border: 1px solid #dddddd;
        }
        .popupText {
            width: 90%;
            height: 40px;
            font-size: 16px;
        }
        .buttonsRow {
            width: 100%;
            display: flex;
            flex-direction: row-reverse;
            flex-wrap: nowrap;
            margin-bottom: 20px;
        }
        .buttonRowButton {
            padding: 10px 8px;
            font-size: 15px;
            letter-spacing: 1px;
            cursor: pointer;
            margin-top: 11px;
            margin-right: 8px;
        }
        #submitRow {
            color: white;
            -webkit-box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            -moz-box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            background-color: rgb(3,155,229);
        }
        #cancelRow:hover {
            background-color: #ddd;
        }
        .rowsBody {
            width: 100%;
            background-color: white;
            border-collapse: collapse;
            table-layout: fixed;
        }
        .row {
            padding: 20px 0px;
            border-bottom: 1px solid #ddd;
            position: relative;
        }
        .rowProperty {
            padding: 10px 5px;
            font-size: 13px;
        }
        .optionsHolder {
            width: 90%;
            height: 40px;
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
        }
        .optionsHolder select {
            height: 100%;
            font-size: 16px;
            appearance: none;
            -webkit-appearance: none;
            border: 0 !important;
            background-color: #446cb2;
            color: white;
            margin-left: 5px;
            padding-left: 5px;
            padding-right: 20px;
            outline: none;
        }
        .row:hover .editRow {
            visibility: visible;
        }
        .editRow {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 20px;
            cursor: pointer;
            visibility: hidden;
            color: grey;
            padding-left: 5px;
            padding-right: 5px;
            z-index: 2;
            font-size: 18px;
        }
        .otherWrapper {
            position: relative;
        }
        .otherInput {
            background-color: transparent;
            border: 0;
            border-bottom: 1px solid #9e9e9e;
            border-radius: 0;
            outline: none;
            width: 95%;
            height: 40px;
            font-size: 16px;
            padding-top: 5px;
        }
        .otherInput:focus {
            border-bottom: 2px solid #29a69a;
        }
        .otherLabel {
            color: #9e9e9e;
            position: absolute;
            top: 10px;
            left: 0;
            font-size: 1rem;
            cursor: text;
            font-size: 16px;
            transform: translate(0, 0) scale(1);
            transition: transform 0.1s ease-out;
        }
        .otherClose {
            width: 20px;
            height: 20px;
            position: absolute;
            right: 5px;
            top: 15px;
            cursor: pointer;
        }
        .otherClose svg {
            width: 100%;
            height: 100%;
        }
        .activeLabel {
            transform: translate(-14%, -100%) scale(0.7);
            color: #29a69a;
        }
        .editDelete {
            width: 100px;
            background-color: white;
            position: absolute;
            top: 10px;
            left: -90px;
            display: none;
            z-index: 3;
            box-shadow: 0 2px 4px -1px rgba(0,0,0,.2), 0 4px 5px 0 rgba(0,0,0,.14), 0 1px 10px 0 rgba(0,0,0,.12);
            -webkit-box-shadow: 0 2px 4px -1px rgba(0,0,0,.2), 0 4px 5px 0 rgba(0,0,0,.14), 0 1px 10px 0 rgba(0,0,0,.12);
            -webkit-user-select: none; /* Safari */        
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }
        .editDelete div {
            width: 100%;
            padding: 12px 5px;
            text-align: center;
            font-size: 16px;
        }
        .editDelete div:hover {
            background-color: #ddd;
        }
        .row:hover {
            background-color: #f5f5f5;
        }
        .checkboxInput {
            width: 40px;
            height: 40px;
            background-color: white;
            border: 1px solid #ccc;
            cursor: pointer;
        }
        .checked {
            background-color: rgb(3, 155, 229);
            color: white;
            text-align: center;
            font-size: 30px;
            -webkit-user-select: none; /* Safari */        
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none;
        }
        .dateInput {
            width: 90%;
            height: 40px;
            font-size: 16px;
            outline: none;
            appearance: none;
            -webkit-appearance: none;
            border: 1px solid #dddddd;
        }
        .timeInput {
            width: 90%;
            height: 40px;
            font-size: 16px;
            outline: none;
            appearance: none;
            -webkit-appearance: none;
            border: 1px solid #dddddd;
        }
        .newTableRowBar {
            width: 100%;
            height: 60px;
            border-bottom: 1px solid #ddd;
            position: relative;
        }
        .createRow {
            color: white;
            float: right;
            padding: 10px 8px;
            background-color: rgb(3,155,229);
            font-size: 15px;
            letter-spacing: 1px;
            cursor: pointer;
            -webkit-box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            -moz-box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
            margin-top: 11px;
            margin-right: 8px;
        }
        .searchRows {
            /* width: 100%; */
            width: calc(100% - 200px);
            /* height: 70px; */
            height: 100%;
            float: left;
            display: flex;
            flex-direction: row;
            align-items: center;
        }
        .activeSearch {
            background-color: white;
            box-shadow: 0px 1px 2px 0px rgba(60,64,67,.3), 0px 2px 6px 2px rgba(60, 64, 67, 0.15);
            border-bottom: 0;
            z-index: 10;
        }
        .searchIcon {
            font-size: 17px;
            margin-left: 25px;
            color: #999;
        }
        .searchInput {
            flex-grow: 1;
            background-color: transparent;
            border: 0;
            outline: none;
            height: 100%;
            padding-left: 15px;
            font-size: 17px;
        }
        .searchInput::placeholder {
            font-weight: 300;
            color: #999;
        }
        
    </style>
</head>
<body>
    <div class = "background">
        <div class="barLeft">
            <div class="sideBarTitle">
                    <img width = "250" height = "102" class = "headerLogo" src = "/public/images/logo_transparent.png" />
            </div>
            <div class="sideBarOverview">
                <div class="overViewMain">
                    Courses Overview
                </div>
            </div> 
            <% for (var i = 0; i < courses.length; i++) { %>
                <div class="sideBarTopic" expanded = "false" onclick = "expandSideBar(this)">
                    <div class="sideBarMain">
                        <%=courses[i].course%>
                    </div>
                    <div class="sideBarSecondary">
                        <%=courses[i].semester.name%>, block <%=courses[i].block%>
                    </div>
                    <div class="expandingBlock">
                        <div class="expandedLink">
                            Overview
                        </div>
                        <div class="expandedLink">
                            Assignments
                        </div>
                        <div class="expandedLink">
                            Notes
                        </div>
                    </div>
                </div>
            <% } %> 
        </div>
        <div class="bodyRight">
            <div class = "bodyUpperSection">
                <div class="topBar">
                    PVSS (sd83)
                </div>
                <div class="secondaryBar">
                    <div class="barTitle">
                        <%=teacher.firstName%> <%=teacher.lastName%>
                    </div>
                </div>
            </div>
            <div class = "bodyLowerSection">
                <div class="tableHolderMain">
                    <div class="newTableRowBar" id = "newTableRowBar">
                        <div class="searchRows" id = "searchRows">
                            <i class="searchIcon fas fa-search"></i><input index = "0" id = "searchText" oninput = "searchText(this.value)" type="text" onfocus = "toggleBlur()" onblur = "toggleBlur()" class = "searchInput" placeholder = "Search for <%=singular.toLowerCase()%>">
                        </div>
                        <div class="createRow" onclick = "toggleRowCreate()">
                            NEW <%=singular.toUpperCase()%>
                        </div>
                    </div>
                    <table class="rowsBody">
                        <tr class = "rowsHeader">
                            <% for (var i = 0; i < keys.length; i++) { %>
                                <td class="rowHeader" onclick = "sortElements(this, <%=i%>)"><%=keys[i].name%><i class="unselectedArrow fas fa-long-arrow-alt-up"></i><i class="unselectedArrow fas fa-long-arrow-alt-down"></i></td>
                            <% } %>
                        </tr>
                        <tbody>
                            <tr>
                                <td colspan="<%=keys.length%>" style = "padding: 0px">
                                    <div class="container" id = "openRowContainer">
                                        <div class="container-top">
                                            <table>
                                                <tr>
                                                    <% for (var i = 0; i < keys.length; i++) { %>
                                                        <td class="createRowCategory">
                                                            <% if (inputTypes[keys[i].propertyName].type == "text") { %>
                                                                <input type="text" id = "create_<%=keys[i].propertyName%>" class = "textInput createCategory text" name = "<%=keys[i].propertyName%>">
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "select") { %>
                                                                <div class="optionsHolder">
                                                                    <select name = "<%=keys[i].propertyName%>" class = "createCategory select"  id = "create_<%=keys[i].propertyName%>" onchange = "otherCheck(this)">
                                                                        <% if (inputTypes[keys[i].propertyName].optionType == "list") { %>
                                                                            <% for (var j = 0; j < inputTypes[keys[i].propertyName].options.length; j++) { %>
                                                                                <option value="<%=inputTypes[keys[i].propertyName].options[j]%>"><%=inputTypes[keys[i].propertyName].options[j]%></option>
                                                                            <% } %>
                                                                            <% if (inputTypes[keys[i].propertyName].other) { %>
                                                                                <option value="__other__"><%=inputTypes[keys[i].propertyName].otherName%></option>
                                                                            <% } %>
                                                                        <% } else { %>
                                                                            <% for (var key in inputTypes[keys[i].propertyName].options) { %>
                                                                                <option value="<%=key%>"><%=inputTypes[keys[i].propertyName].options[key]%></option>
                                                                            <% } %>
                                                                            <% if (inputTypes[keys[i].propertyName].other) { %>
                                                                                <option value="__other__"><%=inputTypes[keys[i].propertyName].otherName%></option>
                                                                            <% } %>
                                                                        <% } %>
                                                                    </select>
                                                                </div>
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "time") { %>
                                                                <input type="time" id = "create_<%=keys[i].propertyName%>" class = "timeInput createCategory time" name = "<%=keys[i].propertyName%>">
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "date") { %>
                                                                <input type="date" id = "create_<%=keys[i].propertyName%>" class = "dateInput createCategory date" name = "<%=keys[i].propertyName%>">
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "checkbox") { %>
                                                                <% if (inputTypes[keys[i].propertyName].default == "open") { %>
                                                                    <div id = "create_<%=keys[i].propertyName%>" value = "open" class = "checkboxInput createCategory checkbox" name = "<%=keys[i].propertyName%>" onclick="toggleCheckBox(this)"></div>
                                                                <% } else { %>
                                                                    <div id = "create_<%=keys[i].propertyName%>" value = "checked" class = "checkboxInput createCategory checkbox checked" name = "<%=keys[i].propertyName%>" onclick="toggleCheckBox(this)">&#10003;</div>
                                                                <% } %>
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "type-select") { %>
                                                                <div name = "<%=keys[i].propertyName%>" value = "<%=inputTypes[keys[i].propertyName].options[0].type%>" class = "optionsHolder createCategory type-select" id = "create_<%=keys[i].propertyName%>">
                                                                    <select class = "type-select" onchange = "openPopup(this.value, '<%=keys[i].propertyName%>', '<%=inputTypes[keys[i].propertyName].options[j].name%>')">
                                                                            <% for (var j = 0; j < inputTypes[keys[i].propertyName].options.length; j++) { %>
                                                                                <option value="<%=inputTypes[keys[i].propertyName].options[j].type%>"><%=inputTypes[keys[i].propertyName].options[j].name%></option>
                                                                            <% } %>
                                                                    </select>
                                                                </div>
                                                            <% } else if (inputTypes[keys[i].propertyName].type == "popup-textarea") { %>
                                                                <div class="popup-textarea createCategory" default = "<%=inputTypes[keys[i].propertyName].default%>" name = "<%=keys[i].propertyName%>" onclick = "openPopup('popup-textarea', '<%=keys[i].propertyName%>', '<%=inputTypes[keys[i].propertyName].default%>')" value = "<%=inputTypes[keys[i].propertyName].default%>" id = "create_<%=keys[i].propertyName%>">
                                                                    <%=inputTypes[keys[i].propertyName].default%> <span style = "padding-left: 10px"><i style = "font-size: 10px; cursor: pointer" class="fas fa-edit"></i></span>
                                                                </div>
                                                            <% } %> 
                                                        </td>
                                                    <% } %>
                                                </tr>
                                            </table>
                                        </div>
                                        <div class="container-bottom">
                                            <div class="buttonsRow">
                                                <div class="buttonRowButton" id = "submitRow" onclick = "createRow()">Create</div>
                                                <div class="buttonRowButton" id = "cancelRow" onclick = "toggleRowCreate()">Cancel</div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>     
                        <tbody id = "rowDisplay">
                            <% for (var i = 0; i < list.length; i++) { %>
                                <tr class="row" id = "row_<%=list[i]._id%>">
                                <% for (var j = 0; j < keys.length; j++) { %>
                                    <% if (j == keys.length-1) { %>
                                        <td class="rowProperty lastProperty" name = "<%=keys[j].propertyName%>">
                                            <%=keys[j].displayFunc(list[i])%>
                                            <i class="fas fa-ellipsis-v editRow" onclick = "openEdit(this)">
                                                <div class="editDelete">
                                                    <div class="edit" onclick = "openEditBar( '<%=JSON.stringify(list[i]).replace(/'/g, `\\'`)%>')">Edit</div>
                                                    <div class="delete" onclick = "deleteRow('<%=list[i]._id%>')">Delete</div>
                                                </div>
                                            </i>
                                        </td>
                                    <% } else { %>
                                        <td class="rowProperty" name = "<%=keys[j].propertyName%>"><%-keys[j].displayFunc(list[i])%></td>
                                    <% } %>
                                <% } %>
                                </tr>
                            <% } %>
                            <% if (list.length == 0) { %>
                                <tr class="row">
                                    <td class="rowProperty">
                                        No instances of <%=singular%> created yet
                                    </td>
                                    <% for (var i = 0; i < keys.length-1; i++) { %>
                                        <td class="rowProperty"></td>
                                    <% } %>
                                </tr>
                            <% } %>
                        </tbody>  
                    </table>
                </div>
            </div>
        </div>
        <div class="popupHolder" id = "popupHolder">
            <div class="popupTitle">
                Enter Information
            </div>
            <div class="popupBody">

            </div>
            <div class="popupBottom">
            <div class="popupCancel" onclick = "closePopup()">CANCEL</div>
                <div class="popupEnter" onclick = "applyPopupValue()">ENTER</div>
            </div>
        </div>
    </div>
</body>
<script>
    FilePond.setOptions({
        server: "/uploadTeacherFile",
    });
    FilePond.registerPlugin(
        FilePondPluginImagePreview,
    );
</script>
<script>
    let coursesExpanded = false;
    function expandCoursesBar(element) {
        let courses = document.getElementById("expandingCourses");
        let courseSecondary = document.getElementById("courseSecondary");
        if (coursesExpanded) {
            courses.style.maxHeight = "0px";
            coursesExpanded = false;
            element.className = "sideBarTopic";
            courseSecondary.style.visibility = "visible";
        } else {
            courses.style.maxHeight = "150px";
            coursesExpanded = true;
            element.className = "expandedTopic";
            courseSecondary.style.visibility = "hidden";
        }
    }
    function expandSideBar(element) {
        let expanded = element.getAttribute("expanded");
        if (expanded == "false") {
            element.children[2].style.maxHeight = "150px";
            element.className = "expandedTopic";
            element.children[1].style.visibility = "hidden";
            element.setAttribute("expanded", "true");
        } else {
            element.children[2].style.maxHeight = "0px";
            element.className = "sideBarTopic";
            element.children[1].style.visibility = "visible";
            element.setAttribute("expanded", "false");
        }
    }
    function toggleBlur() {
        let element = document.getElementById("newTableRowBar");
        element.classList.toggle("activeSearch");
    }
    function searchText(text) {
        let rows = document.getElementsByClassName("row");
        for (var i = 0; i < rows.length; i++) {
            let child = rows[i];
            if (child.innerHTML.toLowerCase().indexOf(text.toLowerCase()) >= 0) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }    
        }
    }
    function focusCustom(element) {
        element.parentNode.children[1].classList.add("activeLabel");
    } 
    function blurCustom(element) {
        if (!element.value) {
            element.parentNode.children[1].classList.remove("activeLabel");
        }
    }
    function customValChange(element) {
        element.parentNode.parentNode.children[0].children[0].setAttribute("value",  element.value);
        element.parentNode.parentNode.children[0].children[0].value = "";
    }
    function closeCustom(element) {
        element.parentNode.parentNode.children[0].style.display = "block";
        element.parentNode.parentNode.children[0].children[0].selectedIndex = 0;
        element.parentNode.parentNode.removeChild(element.parentNode);
    }
    function otherCheck(element) {
        if (element.value == "__other__") {
            let inputWrapper = document.createElement("div");
            inputWrapper.className = "otherWrapper";
            let inputElement = document.createElement("input");
            inputElement.className = "otherInput";
            inputElement.id = "customInput_" + element.name;
            inputElement.setAttribute("onfocus", "focusCustom(this)");
            inputElement.setAttribute("onblur", "blurCustom(this)");
            inputElement.setAttribute("oninput", "customValChange(this)");
            let inputLabel = document.createElement("label");
            inputLabel.setAttribute("for", "customInput_" + element.name);
            inputLabel.className = "otherLabel";
            inputLabel.innerHTML = element.children[element.selectedIndex].innerText;
            inputWrapper.appendChild(inputElement);
            inputWrapper.appendChild(inputLabel);
            let removeOther = document.createElement("div");
            removeOther.className = "otherClose";
            removeOther.innerHTML = '<svg focusable="false" xmlns="https://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path></svg>';
            removeOther.setAttribute("onclick", "closeCustom(this)");
            inputWrapper.appendChild(removeOther);
            element.parentNode.style.display = "none";
            element.parentNode.parentNode.appendChild(inputWrapper);
        }
    }
    function applyPopupValue() {
        let popup = document.getElementById("popupHolder");
        let type = popup.getAttribute("type");
        let inputName = popup.getAttribute("currentInput");
        if (type == "popup-file") {

        } else if (type == "popup-textarea") {
            let input = document.getElementById("create_" + inputName);
            input.setAttribute("value", popup.children[1].children[0].value);
            let editButton = input.children[0];
            input.setAttribute("onclick", `openPopup('${type}', '${inputName}', \`${popup.children[1].children[0].value}\`)`);
            input.innerHTML = popup.children[1].children[0].value.replace(/(\r\\n|\n|\r)/gm, "<br>");
            input.appendChild(editButton);
        }
        closePopup();
    }
    function openPopup(type, inputName, defaultVal) {
        let popup = document.getElementById("popupHolder");
        popup.setAttribute("currentInput", inputName);
        popup.setAttribute("type", type);
        if (type == "popup-file") {
            let fileInput = document.createElement("input");
            fileInput.type = "file";
            fileInput.className = "filepond";
            popup.children[1].innerHTML = "";
            popup.children[1].appendChild(fileInput);
            popup.classList.add("popupHolderOpen");
            let pond = FilePond.create(fileInput);
            pond.on("processfile", function(err, file) {
                console.log(file);
                let input = document.getElementById("create_" + inputName);
                fileName = file.serverId;
                input.setAttribute("value", file.serverId);
                input.setAttribute("fileName", file.filename);
            });
        } else if (type == "popup-textarea") {
            let textarea = document.createElement("textarea");
            textarea.className = "popupTextarea";
            textarea.value = defaultVal;
            popup.children[1].innerHTML = "";
            popup.children[1].appendChild(textarea);
            popup.classList.add("popupHolderOpen");
        }
    }
    function closePopup() {
        let popup = document.getElementById("popupHolder");
        popup.classList.remove("popupHolderOpen");
    }
    function toggleCheckBox(element) {
        if (element.getAttribute("value") == "checked") {
            element.setAttribute("value", "open");
            element.classList.remove("checked");
            element.innerHTML = "";
        } else {
            element.setAttribute("value", "checked");
            element.classList.add("checked");
            element.innerHTML = "&#10003;";
        }
    }
    function setCheckBoxChecked(element) {
        element.setAttribute("value", "checked");
        element.classList.add("checked");
        element.innerHTML = "&#10003;";
    }
    function setCheckBoxOpen(element) {
        element.setAttribute("value", "open");
        element.classList.remove("checked");
        element.innerHTML = "";
    }
    function jsonEscape(str)  {
        return str.replace(/\n/g, "\\\\n").replace(/\r/g, "\\\\r").replace(/\t/g, "\\\\t");
    }
    function openEditBar(json) {
        toggleRowCreate();
        console.log(json);
        json = JSON.parse(jsonEscape(json));
        document.getElementById("submitRow").innerText = "EDIT";
        document.getElementById("submitRow").setAttribute("onclick", `editRow('${json._id}')`);
        populateInputs(json);
    }
    function sortElements(bar, index) {
        document.getElementById("searchText").setAttribute("index", index);
        let direction = 0;
        let arrows = document.getElementsByClassName("selectedArrow");
        for (var i = 0; i < arrows.length; i++) {
            arrows[i].classList.add("unselectedArrow");
            arrows[i].classList.remove("selectedArrow");
        }
        if (bar.getAttribute("direction") === "0" || bar.getAttribute("direction") === "1") {
            direction = -1;
            bar.setAttribute("direction", "-1");
            bar.children[0].classList.remove("unselectedArrow");
            bar.children[0].classList.add("selectedArrow");
        } else {
            direction = 1;
            bar.setAttribute("direction", "1");
            bar.children[1].classList.remove("unselectedArrow");
            bar.children[1].classList.add("selectedArrow");
        }
        let rows = Array.prototype.slice.call(document.getElementById("rowDisplay").children, 0);
        let frag = document.createDocumentFragment();
        
        if (direction != 0) {
            rows.sort(function(a,b) {
                return a.children[index].innerHTML.localeCompare(b.children[index].innerHTML)/direction;
            });
            for (var i = 0; i < rows.length; i++) {
                frag.appendChild(rows[i]);
                // document.getElementById("rowDisplay").appendChild(rows[i]);
            }
        }
        document.getElementById("rowDisplay").appendChild(frag);
        
    }
    function openEdit(element) {
        element.children[0].style.display = "block";
        element.setAttribute("onclick", "closeEdit(this)");
    }
    function closeEdit(element) {
        element.children[0].style.display = "none";
        element.setAttribute("onclick", "openEdit(this)");
    }
    function toggleRowCreate() {
        let container = document.getElementById("openRowContainer");
        container.classList.toggle("openContainer");
        document.getElementById("submitRow").innerText = "CREATE";
        document.getElementById("submitRow").setAttribute("onclick", "createRow()");
    }
    function getInputValues() {
        let options = document.getElementsByClassName("createCategory");
        let newRow = {};
        for (var i = 0; i < options.length; i++) {
            newRow[options[i].name || options[i].getAttribute("name")] = options[i].value || options[i].getAttribute("value");
        }
        return newRow;
    }
    function sanitizeInputs(inputs) {
        for (var key in inputs) {
            let currentInput = document.getElementById("create_" + key);
            if (currentInput) {
                if (currentInput.classList.contains("text")) {
                    currentInput.value = "";
                } else if (currentInput.classList.contains("select")) {
                    currentInput.selectedIndex = 0;
                } else if (currentInput.classList.contains("type-select")) {
                    currentInput.setAttribute("value", "");
                    currentInput.children[0].selectedIndex = 0;
                } else if (currentInput.classList.contains("popup-textarea")) {
                    currentInput.setAttribute("value", currentInput.getAttribute("default"));
                }
            }
        }
    }
    function populateInputs(object) {
        let mapFunctions = compareMap["<%=singular.toLowerCase()%>"];
        for (var key in object) {
            let currentInput = document.getElementById("create_" + key);
            if (currentInput) {
                if (currentInput.classList.contains("text")) {
                    currentInput.value = mapFunctions[key](object);
                } else if (currentInput.classList.contains("select")) {
                    let selectedIndex = 0;
                    for (var i = 0; i < currentInput.children.length; i++) {
                        if (currentInput.children[i].getAttribute("value") == (mapFunctions[key])(object)) {
                            selectedIndex = i;
                        }
                    }
                    currentInput.selectedIndex = selectedIndex;
                } else if (currentInput.classList.contains("checkbox")) {
                    if ((mapFunctions[key])(object) == "checked") {
                        currentInput.setAttribute("value", "checked");
                        setCheckBoxChecked(currentInput);
                    } else {
                        currentInput.setAttribute("value", "open");
                        setCheckBoxOpen(currentInput);
                    }
                } else if (currentInput.classList.contains("date")) {
                    currentInput.value = mapFunctions[key](object);
                } else if (currentInput.classList.contains("time")) {
                    currentInput.value = mapFunctions[key](object);
                } else if (currentInput.classList.contains("popup-textarea")) {
                    let icon = currentInput.children[0];
                    console.log(icon);
                    currentInput.innerHTML = mapFunctions[key](object).replace(/(\\r\\n|\\n|\\r)/gm, "<br>");
                    currentInput.appendChild(icon);
                    currentInput.setAttribute("onclick", `openPopup('popup-textarea', '${currentInput.getAttribute("name")}', \`${mapFunctions[key](object).replace(/(\\r\\n|\\n|\\r)/gm, "\n")}\`)`);
                    currentInput.setAttribute("value", mapFunctions[key](object).replace(/(\\r\\n|\\n|\\r)/gm, "\n"));
                } else if (currentInput.classList.contains("type-select")) {
                    let selectedIndex = 0;
                    for (var i = 0; i < currentInput.children.length; i++) {
                        if (currentInput.children[i].getAttribute("value") == (mapFunctions[key])(object)) {
                            selectedIndex = i;
                        }
                    }
                    currentInput.selectedIndex = selectedIndex;
                }
            }
        }
    }
    function extendError(text) {
        let error = document.getElementById("errorPopDown");
        error.innerText = "Error: " + text;
        error.classList.add("errorDown");
        errorExtened = true;
    }
    function createElementFromHTML(htmlString) {
        var div = document.createElement('div');
        div.innerHTML = htmlString.trim();
        return div.firstChild; 
    }
    function editRow(id) {
        let newRow = getInputValues();
        newRow._id = id;
        postObject(newRow, "/teacherEdit/<%=teacher._id%>/<%=course._id%>?table=<%=singular.toLowerCase()%>&action=edit", function(res) {
            if (res[0] == true) {
                let mapFunction = editMap["<%=singular.toLowerCase()%>"];
                let row = document.getElementById("row_" + id);
                for (var i = 0; i < row.children.length; i++) {
                    let name = row.children[i].getAttribute("name");
                    if (newRow[name]) {
                        row.children[i].innerHTML = mapFunction[name](res[1]);
                    }
                    if (i == row.children.length-1) {
                        let openElement = createElementFromHTML(`<i class="fas fa-ellipsis-v editRow" onclick = "openEdit(this)"><div class="editDelete"><div class="edit">Edit</div><div class="delete" onclick = "deleteRow('${res[1]._id}')">Delete</div></div></i>`);
                        openElement.children[0].setAttribute("onclick", `openEditBar('${JSON.stringify(res[1])}')`);
                        row.children[i].appendChild(openElement);
                    }
                }
            } else {
                extendError(res[1]);
            }
        });
    }
    function deleteRow(id) {
        postObject({_id: id}, "/teacherEdit/<%=teacher._id%>/<%=course._id%>?table=<%=singular.toLowerCase()%>&action=delete", function(res) {
            if (res[0] == true) {
                let row = document.getElementById("row_" + id);
                row.parentNode.removeChild(row);
            } else {
                extendError(res[1]);
            }
        });
    }
    function createRow() {
        let newRow = getInputValues();
        sanitizeInputs(newRow);
        postObject(newRow, "/teacherEdit/<%=teacher._id%>/<%=course._id%>?table=<%=singular.toLowerCase()%>&action=create", function(res) {
            console.log(res);
            if (res[0] == true) {
                let mapFunction = editMap["<%=singular.toLowerCase()%>"];
                let row = document.createElement("tr");
                row.className = "row";
                row.id = "row_" + res[1]._id;
                for (var key in newRow) {
                    let property = document.createElement("td");
                    property.className = "rowProperty";
                    property.innerHTML = mapFunction[key](res[1]);
                    row.appendChild(property);
                }
                row.children[row.children.length-1].classList.add("lastProperty");
                let openElement = createElementFromHTML(`<i class="fas fa-ellipsis-v editRow" onclick = "openEdit(this)"><div class="editDelete"><div class="edit">Edit</div><div class="delete" onclick = "deleteRow('${res[1]._id}')">Delete</div></div></i>`);
                openElement.children[0].setAttribute("onclick", `openEditBar('${JSON.stringify(res[1])}')`);
                row.children[row.children.length-1].appendChild(openElement);
                document.getElementById("rowDisplay").appendChild(row);
            } else {
                populateInputs(newRow);
                extendError(res[1]);
            }
        });
    }
</script>
</html>