<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Time Converter</title>
    <style>
        * {
            font-family: sans-serif;
            box-sizing: border-box;
        }
        html, body {
            width: 100%;
            padding: 0;
            margin: 0;
        }
        .description {
            width: 100%;
            padding: 10px;
            text-align: center;
            letter-spacing: 2px;
            font-size: 25px;
            font-weight: 700;
            line-height: 30px;
        }
        .otherWrapper {
            width: 90%;
            position: relative;
            margin: auto;
            margin-top: 5px;
            margin-bottom: 20px;
        }
        .time {
            background-color: transparent;
            border: 0;
            border-bottom: 1px solid #9e9e9e;
            border-radius: 0;
            outline: none;
            width: 100%;
            height: 60px;
            font-size: 25px;
            padding-top: 5px;
            padding-left: 0;
            letter-spacing: 2px;
        }
        .time:focus {
            border-bottom: 2px solid #29a69a;
        }
        .otherLabel {
            color: #9e9e9e;
            position: absolute;
            top: 23px;
            left: 0;
            font-size: 1rem;
            cursor: text;
            font-size: 25px;
            transform: translate(0, 0) scale(1);
            transition: transform 0.1s ease-out;
            will-change: transform;
        }
        .activeLabel {
            transform: translate(-14%, -115%) scale(0.7);
            color: #29a69a;
        }
        .add {
            width: 50px;
            height: 50px;
            background: linear-gradient(to bottom right, rgb(220,220,220), rgb(230,230,230));
            box-shadow: 2px 3px 8px rgba(0,0,0,0.2);
            margin: auto;
            border-radius: 50px;
            position: relative;
            text-align: center;
        }
        .add svg {
            position: relative;
            top: 13px;
            left: -1px;
        }
        .calculate {
            width: 150px;
            padding: 10px 0px;
            background: linear-gradient(to bottom right, rgb(220,220,220), rgb(230,230,230));
            box-shadow: 2px 3px 8px rgba(0,0,0,0.2);
            text-align: center;
            margin: auto;
            font-size: 25px;
            margin-top: 20px;
            border-radius: 3px;
            margin-bottom: 20px;
        }
        .splitGroup {
            width: 100%;
            text-align: center;
            margin-top: 20px;
        }
        .splitNum {
            font-size: 12px;
            font-weight: 700;
        }
        .splitTime {
            font-size: 25px;
        }
    </style>
</head>
<body>
    <div class="description">
        Enter Your Goal Time (mm:ss.hh)
    </div>
    <!-- <input type="text" class="time" id="time"> -->
    
    <div class="otherWrapper">
        <input type="text" class = "time" name = "time" onfocus="focusCustom(this)" onblur="blurCustom(this)" id = "time">
        <label for = "time" class = "otherLabel">Goal Time</label>
    </div>
    <div class="description">
        Enter Your Current Best Splits (ss.hh)
    </div>
    <div class="splitHolder" id = "splitHolder">
        <div class="otherWrapper">
            <input type="text" class = "time split" onfocus="focusCustom(this)" onblur="blurCustom(this)" id = "split_1">
            <label for = "split_1" class = "otherLabel">Split 1</label>
        </div> 
    </div>
    <div class="add" id = "add" onclick = "add(2, this)">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z"/></svg>
    </div>
    <div id = "newSplits">
       
    </div>
    <div class="calculate" onclick = "calculate()">
        Calculate
    </div>
    <div class="calculate" onclick = "clearBoard()">
        Clear
    </div>
</body>
<script>
    function focusCustom(element) {
        element.parentNode.children[1].classList.add("activeLabel");
    } 
    function blurCustom(element) {
        if (!element.value) {
            element.parentNode.children[1].classList.remove("activeLabel");
        }
    }
    function add(splitNum, element) {
        element.setAttribute("onclick", `add(${splitNum+1}, this)`);
        let wrapper = document.createElement("div");
        wrapper.className = "otherWrapper";
        wrapper.innerHTML = `
            <input type="text" class = "time split" onfocus="focusCustom(this)" onblur="blurCustom(this)" id = "split_${splitNum}">
            <label for = "split_${splitNum}" class = "otherLabel">Split ${splitNum}</label>
        `;
        document.getElementById("splitHolder").appendChild(wrapper);
    }
    function clearBoard() {
        let add = document.getElementById("add");
        add.setAttribute("onclick", `add(${2}, this)`);
        let splitHolder = document.getElementById("splitHolder");
        splitHolder.innerHTML = "";
        let wrapper = document.createElement("div");
        wrapper.className = "otherWrapper";
        wrapper.innerHTML = `
            <input type="text" class = "time split" onfocus="focusCustom(this)" onblur="blurCustom(this)" id = "split_${1}">
            <label for = "split_${1}" class = "otherLabel">Split ${1}</label>
        `;
        splitHolder.appendChild(wrapper);
    }
    function calculate() {
        let goal = document.getElementById("time").value;
        if (goal.indexOf(":") < 0) {
            goal = "0:" + goal;
        }
        goal = goal.split(":");
        goal = parseInt(goal[0])*60 + parseFloat(goal[1]);
        let splitNums = document.getElementsByClassName("split");
        let splits = [];
        let sum = 0;
        for (var i = 0; i < splitNums.length; i++) {
            if (!Number.isNaN(parseInt(splitNums[i].value))) {
                splits.push(parseInt(splitNums[i].value));
                sum += parseInt(splitNums[i].value);
            }
        }
        let ratio = goal / sum;
        document.getElementById("newSplits").innerHTML = "";
        for (var i = 0; i < splits.length; i++) {
            splits[i] = Math.round(splits[i]*ratio*100)/100;
            let splitBox = document.createElement("div");
            splitBox.className = "splitGroup";
            splitBox.innerHTML = `
                <div class="splitNum">
                    Split ${i+1}:
                </div>
                <div class="splitTime">
                    ${splits[i]}
                </div>
            `;
            document.getElementById("newSplits").appendChild(splitBox);
        }
        console.log(splits);
    }
    // let grid = [
    //     [1,2,3,4],
    //     [1,2,3,4],
    //     [1,2,3,4],
    //     [1,2,3,4]
    // ];
    // let counter = 0;
    // for (var i = 0; i < 4; i++) {
    //     for (var j = 0; j < 4; j++) {
    //         for (var k = 0; k < 4; k++) {
    //             for (var l = 0; l < 4; l++) {
    //                 if (Math.abs(i-j) <= 1 && Math.abs(j-k) <= 1  && Math.abs(k-l) <= 1) {
    //                     let row1 = ["M", "M", "M", "M"];
    //                     let row2 = ["A", "A", "A", "A"];
    //                     let row3 = ["T", "T", "T", "T"];
    //                     let row4 = ["H", "H", "H", "H"];
    //                     row1[i] = `|${row1[i]}|`;
    //                     row2[j] = `|${row2[j]}|`;
    //                     row3[k] = `|${row3[k]}|`;
    //                     row4[l] = `|${row4[l]}|`;
    //                     console.log([
    //                         row1,
    //                         row2,
    //                         row3,
    //                         row4,
    //                     ])

    //                     counter++;
    //                 }
    //             }
    //         }
    //     }
    // }
    // console.log(counter);

</script>
</html>